#! /usr/bin/python3
# -*- encoding:utf-8 -*-
# modified from pydf [https://github.com/garabik/pydf]
# Usage:
#   pestat all/high/GPUfat/dev/middle
import sys
import unicodedata
from collections import defaultdict

try:
    import xml.etree.cElementTree as ET
except ImportError:
    import xml.etree.ElementTree as ET

try:
    from commands import  getstatusoutput
except ImportError:
    from subprocess import getstatusoutput


BAR = '#'
FILL = '.'
class Bar(object):
    "Progress bar"
    def __init__(self, percentage=0, width=30, header=False):
        self.percentage = percentage
        self.width = width
        self.header = header

    def __len__(self):
        return self.width

    def __str__(self):
        return self.format('l')

    def format(self, pos):
        if self.header:
            return ' '*self.width
        size = min(int(round(self.percentage*(self.width-2))), self.width-2)
        return '[' + manglestring(size * BAR, self.width - 2, pos, FILL) + ']'


# Home of PBS directory
#PBS_HOME='/usr/local/torque-4.2.9/bin/'
PBS_HOME='/usr/local/bin/'

# Width of each row
FORMAT = [
    ('queue', 8, "l"), ('node', 8, "l"), ('state', 5, "l"), 
    ('gpu', 12, "c"), ('gload', 6, "r"), ('used', 5, "r"), ('mem', 5, "r"), 
    ('info', 10, "l")
]

HEADER = {
    'node': "Node", 'state': "State", 'gpu': 'GPU', 
    'gload': "Load%", 'used': "Used", 'mem': "Mem", 'queue': "Queue",
    'info': "Info",
}

# Exclude queue in blacklist
QUEUE_BLACKLIST = ['manager']

#some default definitions
COLORS = {
    'none'       :    "",
    'default'    :    "\033[0m",
    'bold'       :    "\033[1m",
    'underline'  :    "\033[4m",
    'blink'      :    "\033[5m",
    'reverse'    :    "\033[7m",
    'concealed'  :    "\033[8m",

    'black'      :    "\033[30m",
    'red'        :    "\033[31m",
    'green'      :    "\033[32m",
    'yellow'     :    "\033[33m",
    'blue'       :    "\033[34m",
    'magenta'    :    "\033[35m",
    'cyan'       :    "\033[36m",
    'white'      :    "\033[37m",

    'on_black'   :    "\033[40m",
    'on_red'     :    "\033[41m",
    'on_green'   :    "\033[42m",
    'on_yellow'  :    "\033[43m",
    'on_blue'    :    "\033[44m",
    'on_magenta' :    "\033[45m",
    'on_cyan'    :    "\033[46m",
    'on_white'   :    "\033[47m",

    'beep'       :    "\007"
}


STATE_COLOR = {
    'free': "green",
    'busy': "cyan",
    'excl': "red",
    'down': "default",
    'offl': "on_red",
    'UNKN': "default",
}

GSTATE = {
    'Unallocated': 'free',
    'Exclusive': 'excl',
}

STATE = {
    'job-exclusive': 'excl',
    'job-exclusive,busy': 'busy',
    'busy': 'busy',
    'free': 'free',
    'offline': 'offl',
    'offline,job-exclusive': 'offl',
    'offline,job-exclusive,busy': 'offl',
    'down': 'down',
    'down,busy': 'down',
    'down,offline': 'offl',
    'down,job-exclusive': 'down',
    'down,offline,job-exclusive': 'offl',
    'down,offline,busy': 'offl',
    'down,offline,job-exclusive, busy': 'offl',
    'UNKN': 'UNKN',
}

def get_stat(job_info, target_queue):
    """Parse pbsnodes output"""
    nodes_stat = []
    status, output = getstatusoutput(PBS_HOME + "pbsnodes -aox")
    root = ET.fromstring(output)
    for node in root:
        name = node.find('name').text
        queue = node.find('properties').text
        if queue in QUEUE_BLACKLIST:
            continue

        if target_queue != "all" and queue != target_queue:
            continue

        state = STATE[node.find('state').text]
        ngpus = int(node.find('gpus').text)

        # optional field
        status = node.find('gpu_status')
        if status is None:
            mem = None
            aval = None
            used = None
            loadave = None
            msg = None
        else:
            status_d = dict((i.split('=')[0], '='.join(i.split('=')[1:])) for i in status.text.split(','))
            for gid in range(ngpus):
                gname = 'gpu[{}]'.format(gid)
                gstatus_d = dict((i.split('=')[0], i.split('=')[1]) for i in status_d[gname].split(';'))
                gmem = gstatus_d['gpu_memory_total'].split(' ')[0]
                gused = gstatus_d['gpu_memory_used'].split(' ')[0]
                gstate = GSTATE[gstatus_d['gpu_state']]
                gload = gstatus_d['gpu_utilization']

                gmodel = gstatus_d['gpu_product_name']
                gspeed = gstatus_d['gpu_fan_speed']
                gtemp = gstatus_d['gpu_temperature']
                gmsg = 'model: {}, fan_speed: {}, temp: {}'.format(gmodel, gspeed, gtemp)
                
                ginfo = [
                    (COLORS['default'], queue),
                    (COLORS['default'], name),
                    (COLORS[STATE_COLOR[state]], state),
                    (COLORS[STATE_COLOR[gstate]], '{}-{}'.format(gname, gstate)),
                    (COLORS[STATE_COLOR[gstate]], gload),
                    (COLORS[STATE_COLOR[gstate]], gused),
                    (COLORS[STATE_COLOR[gstate]], gmem),
                    (COLORS['default'], gmsg),
                ]
                nodes_stat.append(ginfo)
    return nodes_stat


def manglestring(s, l, pos, fillchar=' '):
    "cut string to fit exactly into l chars"
    if pos == "r":
        ns = str.rjust(s, l, fillchar)
    elif pos == "l":
        ns = str.ljust(s, l, fillchar)
    elif pos == "c":
        ns = str.center(s, l, fillchar)
    else:
        raise ValueError('Error in manglestring')
    if len(ns) > l:
        ns = ns[:int(l/2)] + "~" + ns[-int(l/2)+1:]
    return ns


def out(s):
    try:
        sys.stdout.write(s)
    except UnicodeEncodeError:
        sys.stdout.write(s.encode('ascii', 'ignore').decode())

def display_table(table):
    header_colour = "yellow"
    for i, j in enumerate(FORMAT):
        width, pos = FORMAT[i][1:3]
        out(COLORS[header_colour])
        out(manglestring(HEADER[str(j[0])], width, pos))
        out(COLORS[header_colour])
        out(' ')
    out('\n')

    for row in table:
        for i, j in enumerate(row[:-1]):
            width, pos = FORMAT[i][1:3]
            out(j[0])
            out(manglestring(str(j[1]), width, pos))
            out(COLORS['none'])
            out(' ')
        out(COLORS['default'])
        out(row[-1][1])
        out(COLORS['default'])
        out('\n')


def get_jobinfo():
    """Get username for each job"""
    job_info = {}
    status, output = getstatusoutput(PBS_HOME + 'qstat -r')
    if status != 0:
        return None

    if output:
        for line in output.splitlines()[5:]:
            content = line.split()
            job_id, username = content[0], content[1]
            job_info[job_id] = username
    return job_info


def main():
    """Main func"""
    queue = "all"
    if len(sys.argv) > 1:
        queue = sys.argv[1]

    job_info = get_jobinfo()
    if job_info is None:
        sys.exit('Unable to communicate with PBS server host')
    nodes_info = get_stat(job_info, queue)
    display_table(nodes_info)


if __name__ == "__main__":
    main()
