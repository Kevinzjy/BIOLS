#!/usr/bin/python2
import os
import sys
from commands import getstatusoutput
from multiprocessing import Pool


def load_users(in_file):
    # login_name:passwd:UID:GID:users:home_directory:shell
    user_dirs = {}
    with open(in_file, 'r') as f:
        for line in f:
            if line.startswith('#'):
                continue
            content = line.rstrip().split(':')
            login_name = content[0]
            home_dir = content[-2]
            user_dirs[login_name] = home_dir
    return user_dirs


def space_usage(user, home):
    from commands import getstatusoutput
    status, output = getstatusoutput('du -sh ' + home)
    if status == 0:
        space = output.split('\t')[0]
    else:
        space = None
    return (user, home, space)


def main():
    try:
        passwd_file = sys.argv[1]
    except IndexError:
        sys.exit('Usage: user_space /etc/passwd')
    
    user_cfg = os.path.abspath(passwd_file)
    if not os.path.exists(user_cfg):
        sys.exit('Input file not found!')

    # Pool
    pool = Pool(16)
    jobs = []

    # Load user config
    user_dirs = load_users(user_cfg)
    for user, home in user_dirs.iteritems():
        vol = home.split('/')[1]
        if vol not in ['astor', 'histor']:
            continue
        jobs.append(pool.apply_async(space_usage, (user, home, )))
    pool.close()

    with open('./user_home_usage.txt', 'w') as out:
        out.write('User,Home,Space\n')
        for job in jobs:
            ret = job.get()
            user, home, space = ret
            out.write('{0},{1},{2}\n'.format(user, home, space))
            out.flush()
            print(user)
    pool.join()
    print('Finished')


if __name__ == "__main__":
    main()
